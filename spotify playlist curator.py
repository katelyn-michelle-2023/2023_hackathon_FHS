import base64
from requests import post, get 
import json
import random
import sys


client_ID = "7712b8a4c98a4bce9db073a070d91341"
client_SECRET = "acbe94d21e9c473f91273a88d5fdd6cf"
user_ID = "31koiprkrokr7frrwwgc5dllyprm?si=8c74cc1216234ef7"

# from spotify API documentation 

# this function creates a token using client identification
# we use this token to access the spotify api data
def make_token():
    auth_string = client_ID + ":" + client_SECRET
    auth_bytes = auth_string.encode("utf-8")
    auth_base64 = str(base64.b64encode(auth_bytes), "utf-8")

    url = "https://accounts.spotify.com/api/token"
    headers = {
        "Authorization" :  "Basic " + auth_base64,
        "Content-Type" :  "application/x-www-form-urlencoded"
    }
    data = {"grant_type" : "client_credentials"}
    result = post(url,headers=headers, data=data)
    json_result = json.loads(result.content)
    token = json_result["access_token"]
    return token 

# this function uses the generated token to authorize 
def get_auth_header(token):
    return{"Authorization": "Bearer " + token}

# searches spotify api to find the playlist that the user wants to search for 
# corresponds to the keyword (genre, mood, artist, etc)
def search_thru_playlist(token, playlist):
    url = "https://api.spotify.com/v1/search"
    headers = get_auth_header(token)
    query = f"q={playlist}&type=playlist&limit=3"
    query_url = url + "?" + query

    result = get(query_url, headers=headers)
    json_result = json.loads(result.content)["playlists"]["items"]
    # if there is no result for the search term then return None
    if len(json_result) == 0:
        print("No playlist can be generated for you.")
        return None
    
    # returns the result of the python dictionary generated by the query
    list = json_result[0], json_result[1], json_result[2]
    return list

# uses playlist ID and token to pull data from spotify api in json format
def get_songs_in_playlist(token,playlist_ID):
    url = f"https://api.spotify.com/v1/playlists/{playlist_ID}/tracks"
    headers = get_auth_header(token)
    result = get(url,headers=headers)
    json_result = json.loads(result.content)
    return json_result

# start of instructions in terminal
print("This is our Spotify playlist recommender based on the keyword that you enter. It can be a genre or a mood. Please enter your keyword in the box.")
keyword = input()
print("How many songs would you like in your curated playlist? (1-10 songs)")
variance = int(input())

token = make_token()


# creates list of songs and corresponding list of artists for those songs by using pre existing playlists
recommended_song_list = []
recommended_song_artist_list = []
recommended_song_link_list = []
recommended_song_uri_list = []

recommended_combined_song_artist_list = []
# gets the name of the track of each song in each playlist
for result in search_thru_playlist(token,keyword):
    playlist_ID = result["id"]

    songs = get_songs_in_playlist(token,playlist_ID)

    # appends songs and song artists to separate but corresponding lists 
    try:
        for num in range(10):
            recommended_song_list.append(str(songs["items"][num]["track"]["name"])) #gets name of song
            recommended_song_artist_list.append(str(songs["items"][num]["track"]["artists"][0]["name"])) #gets name of artist
            recommended_song_link_list.append(songs["items"][num]["track"]["external_urls"]["spotify"]) #gets id of track
            recommended_song_uri_list.append(songs["items"][num]["track"]["uri"]) #gets uri of track

        # zip puts the two lists together
        # list contains nested lists of each song and corresponding artist name 
        recommended_combined_song_artist_list = zip(recommended_song_list, recommended_song_artist_list)

    except (TypeError): #if there is no data for the playlist, print this message and terminate program
        print("Unable to curate playlist for your keyword.")
        sys.exit()

# generating curated list using pre existing playlists
# set => no duplicates in the list 
new_song_list = set()
new_song_artist_list = set()
new_combined_song_artist_list =[]
new_song_link_list = []
new_song_uri_list = []
test_list = list(recommended_combined_song_artist_list)

def playlist_curator(variance) :
    val = variance
    #if the length of list is less than amount user wants, keeps adding
    while(variance > len(new_combined_song_artist_list)):
        #find random number
        random_number = random.randrange(0,val*3)

        if test_list[random_number] in new_combined_song_artist_list:
            pass
        else:
            new_combined_song_artist_list.append(test_list[random_number])
            
playlist_curator(variance)


# putting playlist of curated songs in spotify account
# link to article reference -> https://medium.com/analytics-vidhya/build-your-own-playlist-generator-with-spotifys-api-in-python-ceb883938ce4
endpoint_url = f"https://api.spotify.com/v1/users/{user_ID}/playlists"
request_body = json.dumps({
    "name:" : "Curated For You <3",
    "description" : "Here are some recommended songs!",
    "public" : True 
})
response = post(url=endpoint_url, data=request_body, headers={"Content-Type":"application/json", "Authorization": "Bearer "+token})

# prints out the curated playlist
# puts playlist into new file 
file = open(f"{keyword} playlist.txt","w")
num = 1
for x in new_combined_song_artist_list:
    print(str(num) +'. ' + x[0] + " by " + x[1])
    file.write(str(num) +'. ' + str(x[0]) + " by " + str(x[1])+"\n")
    num+=1
